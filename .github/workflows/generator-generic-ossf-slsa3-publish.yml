# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you generate SLSA provenance file for your project.
# The generation satisfies level 3 for the provenance requirements - see https://slsa.dev/spec/v0.1/requirements
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA generic generator
on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digests: ${{ steps.hash.outputs.digests }}

    steps:
      - uses: actions/checkout@v4

      # ========================================================
      #
      # Step 1: Build your artifacts.
      #
      # ========================================================
      - name: Build artifacts
        run: |
            # These are some amazing artifacts.
            echo "artifact1" > artifact1
            echo "artifact2" > artifact2

      # ========================================================
      #
      # Step 2: Add a step to generate the provenance subjects
      #         as shown below. Update the sha256 sum arguments
      #         to include all binaries that you generate
      #         provenance for.
      #
      # ========================================================
      - name: Generate subject for provenance
        id: hash
        run: |
          set -euo pipefail

          # List the artifacts the provenance will refer to.
          files=$(ls artifact*)
          # Generate the subjects (base64 encoded).
          echo "hashes=$(sha256sum $files | base64 -w0)" >> "${GITHUB_OUTPUT}"

  provenance:
    needs: [build]
    permissions:            - nazwa: Konfiguracja środowiska Node.js
  używa: actions/setup-node@v3.9.1
  z:
    # Ustaw always-authentication w npmrc.
    always-auth: # opcjonalnie, domyślnie false
    # Specyfikacja wersji, która ma zostać użyta. Przykłady: 12.x, 10.15.1, >=10.15.0.
    wersja-węzła: # opcjonalnie
    
    # Plik zawierający specyfikację wersji, której należy użyć. Przykłady: .nvmrc, .node-version, .tool-versions.
    node-version-file: # opcjonalnie
    # Docelowa architektura, której ma używać Node. Przykłady: x86, x64. Domyślnie będzie używana architektura systemowa.
    architektura: # opcjonalnie
    # Ustaw tę opcję, jeśli chcesz, aby akcja sprawdzała, czy jest dostępna najnowsza wersja spełniająca specyfikację wersji.
    sprawdź-najnowsze: # opcjonalnie
    # Opcjonalny rejestr do skonfigurowania dla uwierzytelniania. Ustawia rejestr w plikach .npmrc i .yarnrc na poziomie projektu i konfiguruje uwierzytelnianie do odczytu z env.NODE_AUTH_TOKEN.
    registry-url: # opcjonalnie
    # Opcjonalny zakres uwierzytelniania w rejestrach o określonym zakresie. W przypadku korzystania z rejestru pakietów GitHub (https://npm.pkg.github.com/) zostanie przywrócony właściciel repozytorium.
    zakres: # opcjonalny
    # Służy do pobierania dystrybucji węzłów z wersji węzłów. Ponieważ istnieje wartość domyślna, użytkownik zazwyczaj jej nie podaje. Podczas uruchamiania tej akcji na github.com, wartość domyślna jest wystarczająca. Podczas uruchamiania na GHES, w przypadku ograniczenia przepustowości, można przekazać osobisty token dostępu do github.com.
    token: # opcjonalny, domyślnie ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Służy do określenia menedżera pakietów do buforowania w katalogu domyślnym. Obsługiwane wartości: npm, yarn, pnpm.
    pamięć podręczna: # opcjonalnie
    # Służy do określania ścieżki do pliku zależności: package-lock.json, yarn.lock itd. Obsługuje symbole wieloznaczne lub listę nazw plików w celu buforowania wielu zależności.
    ścieżka-zależności-pamięci-podręcznej: # opcjonalnie

          
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.build.outputs.digests }}"
      upload-assets: true # Optional: Upload to a new release
                  - nazwa: Konfiguracja zestawu SDK .NET Core
  zastosowania: actions/setup-dotnet@v3.4.2
  z:
    # Opcjonalne wersje zestawu SDK do użycia. Jeśli nie zostaną podane, zainstaluje wersję global.json, gdy będzie dostępna. Przykłady: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # opcjonalnie
    # Opcjonalna jakość kompilacji. Możliwe wartości to: daily, signed, validated, preview, ga.
    dotnet-quality: # opcjonalnie
    # Opcjonalna lokalizacja pliku global.json, jeśli plik global.json nie znajduje się w katalogu głównym repozytorium.
    global-json-file: # opcjonalny
    # Opcjonalne źródło pakietu, dla którego ma zostać skonfigurowane uwierzytelnianie. Sprawdzi istniejący plik NuGet.config w katalogu głównym repozytorium i udostępni tymczasowy plik NuGet.config, używając zmiennej środowiskowej NUGET_AUTH_TOKEN jako hasła ClearTextPassword.
    source-url: # opcjonalnie
    # Opcjonalny WŁAŚCICIEL do korzystania z pakietów z organizacji/użytkowników rejestru pakietów GitHub innych niż właściciel bieżącego repozytorium. Używane tylko wtedy, gdy w źródle znajduje się również adres URL GPR.
    właściciel: # opcjonalnie
    # Opcjonalna lokalizacja pliku NuGet.config, jeśli plik NuGet.config nie znajduje się w katalogu głównym repozytorium.
    plik konfiguracyjny: # opcjonalny
    # Opcjonalne dane wejściowe umożliwiające buforowanie folderu globalnych pakietów NuGet
    pamięć podręczna: # opcjonalnie
    # Służy do określania ścieżki do pliku zależności: packages.lock.json. Obsługuje symbole wieloznaczne lub listę nazw plików do buforowania wielu zależności.
    ścieżka-zależności-pamięci-podręcznej: # opcjonalnie

          
